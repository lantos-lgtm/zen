Ifloat: Enum {
    Float: Float,
    Inf
}

dijkstra: Fn {
    a: {
        graph: Map,
        start: Str,
    }
    r: Vec { IFloat }
    fn: {
        dists: Map { key: Str, val: IFloat },
        pq: Vec.priority_queue { {amount: IFloat, vertex: Str} }

        // Initialize distances and priority queue
        lh: Loop(graph) {
            dists[lh.val]: Inf
        }
        dists[start]: Float(0)
        pq.enqueue((amount: 0, vertex: start))    

        // Emulated Main Loop using Loop construct
        lh: Loop(!pq.isEmpty()) {
            { current_dist, current_vertex } = pq.dequeue()

            // Skip if distance is already updated
            if current_dist > dists[current_vertex] {
                lh.next()
            }

            // Update distances
            val: Loop(graph[current_vertex]) {
                tentative_dist = current_dist + graph[current_vertex][val]
                if tentative_dist < dists[val] {
                    dists[val]: tentative_dist
                    pq.enqueue((tentative_dist, val))
                }
            }
        }

        r(dists)
    }
}

main: Fn {
    graph: {
        "A": {"B": 1, "C": 4},
        "B": {"A": 1, "C": 2, "D": 5},
        "C": {"A": 4, "B": 2, "D": 1},
        "D": {"B": 5, "C": 1}
    }
    res: dijkstra(graph, "A")
    std.out.println(res)

}
