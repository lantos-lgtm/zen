// meta information
// > zen zen
// the zen programming language guiding principles
// - write code that a newb zenner can understand
// - write code that can be understood on paper (I don't want to have a facny IDE to understand code)
// - If you write something twice, you should write a function for it
// - Write data structures first


// example.zen

std: @std
{
    Type,
    Int,
    String,
    Float,
    Array
}: std.Type
// The std module contains the standard library of the language. It is automatically imported into every module
{
    io
}: std.io
{
    Allocator,
    Ref
}: std.memory

// importing a non-standard module
// each project entry is build.zen, the build file will add
// - all zen files in the project to the module under localPackages
// - all zen remote packages to the module under packages
customImport    : std.packages.local.customImport    
customPackage   : std.packages.remote.customPackage

// this is an enum but I probably should call it Enum {}
// I feel that enums are just singular maps (key: value)
Color: Type {
    RED,
    GREEN,
    BLUE
}

Name: Private{Type} { // Private is a type that can only be accessed by the module that defines it
    firstName   : String,
    lastName    : Const{String} // Const is a type that can only be set once
}
Person: Type {
    ...Name,
    age     : Int.I32(0),
    color   : Color,
    amount  : Secret{Float.F32} (1_000.0), // Secret is a type that can only be accessed within the same scope it is hidden outside of the scope
    friends : Array{Ref{Person}, alloc: Allocator}()   // alloc will need to be initialized
}
// The Person type is defined as a struct with 4 fields
// The type of the field is specified after the colon
// The default value of the field is specified after the parenthesis
// The default value of the field is optional
// The default value of the field must be a compile-time constant
// Friends has to be a reference to a Person as it is a recursive type


// functions are declared like types with {} and can be called like methods using ()
fullName: Function {
    args    : {
        self: Person
    },
    return  : Result{
        self: String
    },
    body    : {
        return(String(self.firstName + " " + self.lastName))
    }
}

// any function that has an Error must be delt with when called
functionThatFails: Function {
    return: ResultWithError{ // if the any underlying function returns an error, the function must return an error aka bubble up the error
        self: String,
    },
    body: {
        body.errDeffer.append({
            io.stderr.write(String("Error: ${error.value}"))
        })
        return(Error("This function always fails"))
    }
}

main: Function {
    body    : {
        // The main function is the entry point of the program
        // It is automatically called by the runtime
        // The main function must be defined in the root module
        alloc: Allocator.init()

        // there is a default allocator that is defined in the build defer & string use the default allocator
        // however this can be overridden by defining a new allocator
        // string   : String{alloc}
        // myString : string("Hello, World!")
        body.defer.append({
            alloc.deinit()
            io.stdout.write("Goodbye!")
        })
        myPerson: Person(
            firstName   : String{alloc}("John"),
            lastName    : String{alloc}("Doe"),
            age         : Int.I32(42),
            color       : Color.RED,
            amount      : Float.F32(10.0e2),
        )

        // calling a function
        fullName: myPerson.fullName()

        // calling a function that returns an error
        // functionThatFails: functionThatFails() // this will not compile
        functionThatFails: functionThatFails() {
            error: {
                // do something with the error
            },
        } // this will compile
        
        // conditional statements
        if (Boolean.True) {
            io.stdout.write(String("Hello, World!"))
        }

        if (fullName == String("John Doe")) {
            then: {
                io.stdout.write(String("Hello, John Doe!"))
            },
            else: {
                io.stdout.write(String("Hello, Stranger!"))
            }
        }

        // do I want to support this syntax?
        // myValue: if (1 == 1) { then : { return(1) } else: { return(2) }}

        // match statements
        if(myPerson.color) {
            is: {
                Color.RED: {
                    io.stdout.write(String.format("${fullName} likes ${myPerson.color.to(String)}!")) // String interpolation
                },
                Color.GREEN: {
                    io.stdout.write(String.format("${fullName} likes Green!"))
                },
                Color.BLUE: {
                    io.stdout.write(String.format("${fullName} likes Blue!"))
                }
            },
            else: {
                io.stdout.write(String("Hello, Stranger!"))
            }
        }

        // loops are while, for and loop
        i: Int.I32(0)
        // loops return loop handles that can be used to access the loop value or break the loop
        myLoop: loop (i < Int.I32(10)) {
            io.stdout.write(String.format("i = ${i}"))
            i = i + Int.I32(1)
            if (i == Int.I32(3)) {
                myLoop.next()
            }
            if (i == Int.I32(5)) {
                myLoop.break()
            }
        }

        myRange: loop(Range(0, 10)) {
            io.stdout.write(String.format("i = ${myRange.value}"))
        }

        friends: Array{Person, dynamic: Boolean.True}(
            Person(
                firstName   : String("Jane"),
                lastName    : String("Doe"),
                age         : Int.I32(42),
                color       : Color.RED,
                amount      : Float.F32(1_000),
            ),
            Person(
                firstName   : String("John"),
                lastName    : String("Doe"),
                age         : Int.I32(42),
                color       : Color.RED,
                amount      : Float.F32(1_000),
            ),
        )

        fLoop: loop (friends) {
            io.stdout.write(String.format("Hello, ${fLoop.value.fullName()}!"))
        }
    }
}