std: @std
io: std.io
{
    Function,
    Loop,
}: std.functions
{
    Int
}: std.types
{
    Map
}: std.data
{
    Benchmark
}: std.testing

// fribonacci recursive
fribRec: Function{
    args: {
        x: Int
    },
    return: { Int },
    body: {
        if (x < 2) {
            return(x)
        }
        return(fribRec(x - 1) + fribRec(x - 2))
    }
}

// frib recursive with memoization
fribMemo: Function{
    args: {
        x: Int
    },
    return: { Int},
    body: {
        memo: Map(keys: {Int}, values: {Int})
        fribMemoInner: Function {
            args: {
                x: Int
            },
            return: {Int},
            body: {
                if (x < 2) {
                    return(x)
                }
                if (memo.hasKey(x)) {
                    return(memo[x])
                }
                memo[x] = fribMemoInner(x - 1) + fribMemoInner(x - 2)
                return(memo[x])
            }
        }
        return(fribMemoInner(x))
    }
}

// while loop
fribWhile: Function {
    args: {
        x: Int
    },
    return: { Int },
    body: {
        prev: Int(0)
        curr: Int(1)
        next: Int(0)
        myLoop: Loop (x > 0) {
            next = prev + curr
            prev = curr
            curr = next
            x.decrement()
        }
        return(curr)
    }
}

main: Function {
    args: {
        str: Int
    }
    body: {
        max: Int.I32.parse(str) {
            error: {
                // got to think about how to handle errors
                io.stdout.print(String.parse("usage\n >fribonacci <number>"))
                return(Void)
            }
        }
        if (max < 0) {
            io.stdout.print(String.parse("usage\n >fribonacci <number>"))
            return(Void)
        }
        Benchmark ("frib") {
            io.stdout.print(String.parse(fribRec(max)))
        }
        Benchmark ("fribMemo") {
            io.stdout.print(String.parse(fribMemo(max)))
        }
        Benchmark ("fribWhile") {
            io.stdout.print(String.parse(fribWhile(max)))
        }

    }
}