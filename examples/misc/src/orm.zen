


AssetType: {
    Cash,
    Equity,
    Bond,
    Fund,
    CryptoCoin,
    CryptoToken,
    Other,
}

Asset: {
    transactions:   Array {Transaction}
    name:           String,
    symbol:         String,
    // enable funds of funds
    children:       Array {Asset},
}

Rate: {
    quote:          Asset,
    base:           Asset,
    sign:           Boolean,
    mentisa:        Int.U64,
    exponent:       Int.U8,
    date:           Date,
}

TransactionType: Enum {
    Deposit,
    Withdrawal,
    Transfer,
    Interest,
    Dividend,
    Fee,
    Tax,
    Other,
}

Transaction: {
    account:            Account,
    transactionType:    TransactionType,
    asset:              Asset,
    amount:             Int,
    date:               Date,   
    settled:            Date
}

TransactionGroup: {
    transactions: Array {Transaction}
}

Account: {
    transactions: Array {TransactionGroup}
}

// Because this is important data we will never delete, 
// we create a new entry with an active flag and active 
// date then take the most recent active entry and use 
// that as the current state.
Active: {
    active:     Boolean,
    activeDate: Date,
}
AddActiveFlags: Fn {
    args: { 
        self: Type,
    },
    returns: {
        self:   Type,
        error:  Error,
    },
    fn: {
        // TODO
        return self
    }
}


// models
assetModel:             Orm.Model(Asset)
transactionTypeModel:   Orm.Model(TransactionType)
transactionModel:       Orm.Model(Transaction)
transactionGroupModel:  Orm.Model(TransactionGroup)
accountModel:           Orm.Model(Account)
accountModel.fields.push(
    Orm.VirtualField(
        name: "balance",
        type: String,
        resolver: (args) => {
            account: Account = args.model
            balance: Int = 0
            baseCurrency: String = "USD"
            account.transactions.each { 
                
            }
            return balance
        }
    )
)

modelsPreActiveFlag:    Orm.createModels({
    assetTypeModel,
    assetModel,
    transactionTypeModel,
    transactionModel,
    transactionGroupModel,
    accountModel,
})

models: Orm.createModels({
    assetTypeModel:         AddActiveFlags(assetTypeModel),
    assetModel:             AddActiveFlags(assetModel),
    transactionTypeModel:   AddActiveFlags(transactionTypeModel),
    transactionModel:       AddActiveFlags(transactionModel),
    transactionGroupModel:  AddActiveFlags(transactionGroupModel),
    accountModel:           AddActiveFlags(accountModel),
})
