
checkAllFor: Fn {
    args:{
        self: Type,
        other: Type
    }
    res: Res { Bool },
    body: {
        if (args.self == other) {Bool.True}
        if (args.self.Type().fields.length() > 0)  {  
            fLoop: Loop (args.self) {
                res: res + fLoop.value.checkAllFor(other)
            }
        }
        Bool.False
    }
}


// our schema example
// http://www.zug.dev/schema.json
{
    "routes": {
        "greet": {
            "Kind": "Function",
            "value": {
                "arg": {
                    "kind": "Map",
                    "value": {
                        "arg": {
                            "name": {
                                "kind": "String",
                                "value": ""
                            },
                            "message": {
                                "kind": "String",
                                "value": ""
                            }
                        }
                    }
                }
            }
        }
    },
    "types": {
        "String": "String",
        "Int": "Int",
        "MapExample": {
            "key": "SomeThing",
            "value": {
                "key": "Int",
                "value": "String"
            } 
        }
    }
}

BuildRoute: Fn {
    args: {
        self: Fn
    },
    body: {
        // we want to get the return type and the arguments 

        fn: args.self


        is_socket: fn.checkAllFor(Stream)


        if (is_socket) {
            // build socket route
        }
        // build normal route

    }
}