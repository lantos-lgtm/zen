Token: Enum {
    // Literals
    Literal: Enum {
        STRING_LITERAL      : String,
        INT_LITERAL         : Int.I64,
        FLOAT_LITERAL       : Float.F64,
        // BOOL_LITERAL        : Boolean,
        IDENTIFIER          : String,
    }

    Format: Enum {
        // Whitespace
        TAB                 : String("\t"),
        NEWLINE             : String("\n"),
        SPACE               : String(" "),
        COMMA               : String(","),
    },

    Unary: Enum {
        // `op` rhs
        // lhs `op`
        NOT                 : String("!"),
        // MINUS               : String("-"),
        // PLUS                : String("+"),
        ELIPSIS             : String("..."),
    },

    Binary: Enum {
        // lhs `op` rhs
        // Operators
        COLON               : String(":"),
        DOT                 : String("."),
        // comparison
        EQUAL               : String("="),
        NOT_EQUAL           : String("!="),
        LESS                : String("<"),
        LESS_EQUAL          : String("<="),
        GREATER             : String(">"),
        GREATER_EQUAL       : String(">="),
        // logical
        AND                 : String("&&"),
        OR                  : String("||"),
        // maths
        PLUS                : String("+"),
        MINUS               : String("-"),
        STAR                : String("*"),
        SLASH               : String("/"),
        PERCENT             : String("%"),
        // bitwise
        BIT_AND             : String("&"),
        BIT_OR              : String("|"),
        BIT_XOR             : String("^"),
        BIT_NOT             : String("~"),
        BIT_LSHIFT          : String("<<"),
        BIT_RSHIFT          : String(">>"),
    },

    // Ternary: Enum {
    //     // lhs `op` mid `op` rhs
    //     // we don't have a ternary operator
    // },

    Grouping: Enum {
        // (expr)
        L_PAREN             : String("("),
        R_PAREN             : String(")"),
        L_CURLY             : String("{"),
        R_CURLY             : String("}"),
    },

    Comment: Enum {
        // comment
        COMMENT             : String("//"),
    },
}

Lexer: Type {
    tokens  : Array{self:Token, dynamic: Boolean.True},
    source  : String,
    pos     : Int.I64,
    line    : Int.I64,
    col     : Int.I64,
}

LexerError: Error {
    message: String,
}

isAscii: Function {
    args: {
        char: String,
    },
    return: Boolean,
    body: {
        return(char >= '\x00' && char <= '\x7F')
    }
}

isDigit: Function {
    args: {
        char: String,
    },
    return: Boolean,
    body: {
        return(char >= '\x30' && char <= '\x39')
    }
}

startsWith: Function {
    args: {
        self: String,
        other: String,
    },
    return: Boolean,
    body: {
        return(self.substring(Int.I64(0), other.length()) = other)
    }
}

startsWith: Function {
    args: {
        self: String,
        cond: Function {
            args: {
                self: String,
            },
            return: Boolean,
        },
    },
    return: Boolean,
    body: {
        return(self.cond(self))
    }
}

readwhile: Function {
    args: {
        self: String,
        cond: Function {
            args: {
                self: String,
            },
            return: Boolean,
        },
    },
    return: String,
    body: {
        str: String()
        pos: Int.I64(0)
        while (pos < self.length() && self.cond(self.window(pos))) {
            str += self.window(pos)
            pos.inc()
        }
        return(str)
    }
}

lex: Function {
    args: {
        self. Lexer,
        source: String,
    },
    return: {
        Array{self:Token, dynamic: Boolean.True},
        LexerError,
    },
    body: {
        self.source = source
        self.pos = 0
        self.line = 1
        self.col = 1
        self.tokens = Array{Token}()

        lexLoop: loop (self.pos < self.source.length()) {
            // match defined tokens against source
            // `:`, `+` ...
            l1: loop(Tokens.values) {
                if (l1.value != Literal) {
                    // handle non-literal tokens
                    l2: loop(l1.values) {
                        if (self.source.window(self.pos).startsWith(l2.value)) {
                            token: Token(l2.value).parse(l2.value)
                            self.tokens.push(token)
                            self.pos.inc(l2.value.length())
                            // skip to next token
                            l1.next()
                        }
                    }
                }
                // handle literal tokens
                // match numbers (int, float) exponent?
                // match strings
                // match identifiers
                // match comments
                // numbers
                
                if (self.source.startsWith(self.pos, cond: {cond.return(cond.isDigit())})) {
                    // _, 0-9, ., e
                    // todo: handle exponent
                    str: self.readwhile(self.pos, cond: {
                        // cond.return(cond.isDigit() || cond.in(String("_"), String("."), String("e"))))
                        cond.return(cond.isDigit() || cond.in(String("_"), String(".")))
                    })
                
                    // if(str.count(".") > 1 || str.count("e") > 1) {
                    if(str.count(".") > 1) {
                        // invalid number
                        return(LexerError("Invalid number: " + str))
                    }
                    if (str.count(".") == 1) {
                        // float
                        token: Token.FloatLiteral(Float.F64.from(str))
                        self.tokens.push(token)
                        self.pos.inc(token.value.length())
                        // skip to parsing next token
                        l1.next()
                    }
                    token: Token.IntLiteral(Int.I64.from(str))
                }

                // strings
                if (self.source.window(self.pos).startsWith(String("\""))) { 
                    // string
                    str: self.readwhile(self.pos, cond: {cond.return(!cond.in(String("\"")))})
                    token: Token.StringLiteral(str)
                    self.tokens.push(token)
                    self.pos.inc(token.value.length())
                    // skip to parsing next token
                    l1.next()
                }

                // identifiers
                if (self.source.window(self.pos).startsWith(cond: {cond.return(cond.isAlpha())})) {
                    // _, a-z, A-Z
                    str: self.readwhile(self.pos, cond: {
                        cond.return(cond.isAlpha() || cond.isDigit() || cond.in(String("_")))
                    })
                    token: Token.Identifier(str)
                    self.tokens.push(token)
                    self.pos.inc(token.value.length())
                    // skip to parsing next token
                    l1.next()
                }

                // comments
                if (self.source.window(self.pos).startsWith("//")) {
                    // comment
                    str: self.readwhile(
                        self.pos,
                        cond: { 
                            self.return(!value.in(String("\n"), String("\r")))
                        }
                    )
                    token: Token.Comment(str)
                    self.tokens.push(token)
                    self.pos.inc(token.value.length())
                    // skip to parsing next token
                    l1.next()
                }
            }
        }
    }
}