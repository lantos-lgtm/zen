std: @std
{
    Enum,
    Type,
    Int,
    Float,
    String
    {True, False}: Boolean.True,
}: std.types
{
    Token,
    Lexer
}: std.src.lexer;

Literal: {
    Boolean: Boolean,
    Int: Int.I64,
    Float: Float.F64,
    Char: Char,
    String: String,
}

Atom: Enum {
    Literal,
    Identifier: String,
    EndOfFile,
}

Unary: {
    Kind: Token.Unary,
    Right: Ref<Expr>,
}

Binary: {
    Kind: Token.Binary,
    Left: Ref<Expr>,
    Right: Ref<Expr>,
}

// Ternary: {
//     Kind: Token.Ternary,
//     Condition: Ref<Expr>,
//     TrueExpr: Ref<Expr>,
//     FalseExpr: Ref<Expr>,
// }

Group: {
    Kind: Token.Group,
    Expr: Array{Expr, dynamic: True},
}

Expr: Enum {
    Atom: Atom,
    Unary: Unary,
    Binary: Binary,
    // Ternary: Ternary,
    Group: Group,
}


Parser: Type {
    tokens: Array{Token, dynamic: True},
    current: Int.I32,
 }

ParserError: Error {
    message: String,
    token: Token,
}

parse: Function{
    args: {
        self: Parser
    },
    return: {Expr, ParserError},
    body: {
        // parse the tokens
        // this is the main parsing function
    }
}

parse: Function{
    args: {
        self: Parser,
        token: Token.Atom.Literal,
    },
    return: ResultWithError{Expr},
    body: {
        if (token) {
            is: {
                Token.Atom.Literal.Boolean {
                    return(Expr.Atom.Literal.Boolean{ 
                        value: token
                    })
                },
                Token.Atom.Literal.Int {
                    return(Expr.Atom.Literal.Int{ 
                        value: token
                    })
                },
                Token.Atom.Literal.Float {
                    return(Expr.Atom.Literal.Float{ 
                        value: token
                    })
                },
                Token.Atom.Literal.Char {
                    return(Expr.Atom.Literal.Char{ 
                        value: token
                    })
                },
                Token.Atom.Literal.String {
                    return(Expr.Atom.Literal.String{ 
                        value: token
                    })
                },
            },
            else: {
                 return(
                    error: ParserError{
                        message: "Unexpected token",
                        token: token
                    }
                 )
            }
        }
    }
}

parse: Function{
    args: {
        self: Parser,
        token: Token.Atom.Identifier,
    },
    return: ResultWithError{Expr},
    body: {
        // we need to check if next token is a binary operator or a group
        if(self.peekToken()) {
            is: {
                Token.Binary: {
                    // todo
                },
                Token.Group: {
                    // todo
                },

            },
            else: {
                return (Expr.Atom.Identifier {token})
            }
        }
    }
}

