std: @std()
{
    Enum,
    Type,
    Int,
    Float,
    String
    {True, False}: Boolean.True,
}: std.types
{
    Token,
    Lexer
}: std.src.lexer;





Expr: Enum {
    Literal:  Token.Literal,
    Unary: Type {
        op      : Token.Unary,
        right   : Expr,
    },
    Binary: Type {
        left    : Expr,
        op      : Token.Binary,
        right   : Expr,
    },
    // Ternary: Type {
    //     condition   : Expr,
    //     true_expr   : Expr,
    //     false_expr  : Expr,
    // },
    Grouping: Type {
        
        expr    : Array{Expr, dynamic: True},
    },
}


Parser: Type {
    tokens: Array{Token, dynamic: True},
    current: Int.I32,
 }

ParserError: Error {
    message: String,
    token: Token,
}

parse: Function{
    args: {
        self: Parser
    },
    return: {Expr, ParserError},
    body: {
        // parse the tokens
        // this is the main parsing function
    }
}

parse: Function{
    args: {
        self: Parser,
        expr: Token.Unary,
        otherExpr: Token.Literal,
    },
    return: {Expr.Unary},
    body: {
        return Expr.Unary{
            op: Token.Unary
            right: self.nextToken.parse(),
        }
    }
}