While @import { "./while.zim" }
Function @import { "./function.zim" }


ErrorType: {
    self: Type,
    message: String,
}

Res: {
    self: Type,
    isComplete: Bool,
}

// we need some compiler magic


ERes: Result {
    error: ErrorType,
}


Fn: {
    args: Type
    return: Enum { Res, ERes }
    fn: Stmt
}

// example function

myFunction: Fn {
    args: {
        requiredArg : String,
        optonalArg  : Some{String},
        pointerArg  : Ptr,
        referenceArg: Ref{String},
    }
    return: Res { String },
    fn: {
        // can do this
        value: String
        if (optionalArg) {
            value: optionalArg
        }
        // or this
        value: if (optionalArg) { is: {optionalArg}, else: {String("default")} }
    }
}

someTask: {
    args:{
        time: Int.I32(1000)
    }
    res: { String },
    fn: {
        // can be assigned to a variable
        res: String("Hello World")
        std.sleep(args.time)
        // can be reassigned
        res: String.concat("Hello World slept for ", args.time, "ms")

        res() // this returns 
        // this is unreachable
        res(String("Hello World somthing else"))
    }
}


main: Fn {
    fn: {
        val: someTask(Int.I32(1000)),

    }
}