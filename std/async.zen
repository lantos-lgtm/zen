


// proc request*(client: HttpClient | AsyncHttpClient; url: Uri | string): Future[Response | AsyncResponse]
//               {.multisync.} =
//   result = await client.requestAux(url, httpMethod, body, headers, multipart)
// expands to
// proc request*(client: HttpClient; url: Uri | string): Response =
//   result = client.requestAux(url, httpMethod, body, headers, multipart)
// proc request*(client: AsyncHttpClient; url: Uri | string): Future[AsyncResponse] {.async.} =
//   result = client.requestAux(url, httpMethod, body, headers, multipart)



// proc someMulti(someVal) {.multiSync.} =
// waitFor someMultisync(someVal)

// expands to this
// proc someAsync(someVal) {.async.} =
// proc someSync(someVal) =

// waitFor someAsync(someVal)
// someSync(someVal)


// I'm pretty sure this can just be pulled into a result type
// then on the exe build specify Async or Sync

// to avoid red/blue code we can assume all code is async and then when you access value on a result.
// as sync code is async from the results perspective it just happens instantly
// it will throw an error ifit's not ready yet
// ifeverything is a result we can bubble up the complete status
// this might be similar to go's async 
sleepyFunc: Function{
    args: {
        i: Int.I32
        time: Int.U32
    },
    body: {
        io.println("I'm going to sleep for " & time & " seconds")
        sleep(time);
        io.println("I'm awake!")
    },
}

main: Function{
    body: {
        let client = HttpClient()
        // trigger all requests
        // this loads up all the requests
        // but ifthe exe is sync it will not trigger any suspends
        requestLoop: loop(10){
            return: Array{HttpResponse}
            body: {
                response: client.request(url)
                requestLoop.return.add(response)
            }
        }
        waitLoop: loop(true) {
            done: requestLoop.return.foldLeft(){self.complete}
            if(done){
                waitLoop.break()
            }
        }



    }
}