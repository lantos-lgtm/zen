

// enums are a special type that returns a type descriptor
// They can be thought as 

// RED: String("RED")
// GREEN: String("GREEN")
// BLUE: String("BLUE")
// RGB: RED | GREEN | BLUE

Enum: Enum {
    
}

parse: Function {
    args: {
        self: Enum,
        string: String,
    }
    returns: {
        self: Enum,
        error: Error,
    }
    body: {
        enumLoop: loop (self.keys()) {
            if (enumLoop.value == string) {
                return(enumLoop.value)
            }
            if (enumLoop.value.value == string) {
                return(enumLoop.value)
            }
        }
        return(Error(error: Error.InvalidInput, message: "Enum value not found"))
    }
}

Test (
    name: "Enum",
    exmaple: Boolean.true,
    for: Enum
) {
    Currency: Enum {
        GBP: String("GBP"),
        USD: String("USD"),
        EUR: String("EUR"),
    }
    Rgb: Enum {
        RED,
        GREEN,
        BLUE,
    }

    Literal: Enum {
        String: String,
        Float: Float.f128,
        Int: Int.i128,
    }

    Token: Enum {
        NewLine: Int.usize,
        WhiteSpace: Int.usize,
        Comment: String,
        Identifier: String,
        Literals: Literal,
    }

    // usage example
    currency: Currency.GBP
    color: Rgb.RED
    token: Token.Comment("This is a comment")

    io.stdout.writeLn(currency)                        // > "GBP"
    io.stdout.writeLn(String.parse(currency))          // > "GBP"
    io.stdout.writeLn(color)                           // > 0
    io.stdout.writeLn(String(color))                   // Fails as Rgb.RED is not a string
    io.stdout.writeLn(String.parse(color))             // > "RED"
    io.stdout.writeLn(token)                           // > "comment"
    io.stdout.writeLn(String(token))                   // > "This is a comment"
    io.stdout.writeLn(String(token.Type))              // String
}
